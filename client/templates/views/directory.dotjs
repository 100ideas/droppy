{{##def.data:
<script>
it = {
    entries: String   // type|mtime|size
    folder: String    // Folder path
    isUpload: Boolean // Determines if we need to DecodeURI
    sortBy: String    // What property to sort the entries by
    sortAsc: Boolean  // Ascending or descending
    playing: String   // Currently playing file
}
</script>
#}}
{{##def.directoryHeader:
    <div class="file-header">
        <span data-sort="type" class="header-name {{= entry.sort.type }}">Name {{= droppy.svg.triangle }}</span>
        <span data-sort="mtime" class="header-mtime {{= entry.sort.mtime }}">Modified {{= droppy.svg.triangle }}</span>
        <span data-sort="size" class="header-size {{= entry.sort.size }}">Size {{= droppy.svg.triangle }}</span>
        <span class="header-line-buttons"></span>
    </div>
#}}
{{##def.folder:
    <div class="data-row {{= entry.classes }}" data-type="folder" data-id="{{= entry.id }}" data-name="{{= entry.sortname }}">
        <span class="sprite sprite-folder">{{= entry.svgIcon }}</span>
        <a class="folder-link entry-link">{{= entry.name }}</a>
        <span class="mtime" data-timestamp="{{= entry.mtime }}">{{= timeDifference(entry.mtime) }}</span>
        <span class="size" data-size="{{= entry.size }}">{{= entry.prettysize }}</span>
        <span class="line-buttons">
            <span class="sharelink" title="Share download link">{{= droppy.svg.link }}</span>
            <a class="zip" title="Download as Zip" href="?~~{{= entry.id }}" target="nope" download="{{= entry.name }}.zip">{{= droppy.svg.download }}</a>
            <span class="entry-menu" title="Actions">{{= droppy.svg.menu }}</span>
        </span>
    </div>
#}}
{{##def.file:
    <div class="data-row {{= entry.classes }}" data-type="file" data-id="{{= entry.id }}" data-name="{{= entry.sortname }}">
        <span class="sprite {{= entry.sprite}}">{{= entry.svgIcon }}</span>
        <a class="file-link entry-link" href="?~{{= entry.id }}" target="nope" download="{{= entry.name }}">{{= entry.name }}</a>
        <span class="mtime" data-timestamp="{{= entry.mtime }}">{{= timeDifference(entry.mtime) }}</span>
        <span class="size" data-size="{{= entry.size }}">{{= entry.prettysize }}</span>
        <span class="line-buttons">
            <span class="sharelink" title="Share download link">{{= droppy.svg.link }}</span>
            <a class="download" href="?~{{= entry.id }}" target="nope" download="{{= entry.name }}" title="Download File">{{= droppy.svg.download }}</a>
            <span class="entry-menu" title="Actions">{{= droppy.svg.menu }}</span>
        </span>
    </div>
#}}
{{##def.error:
    <div class="data-row {{= entry.classes }}" data-type="error" data-id="{{= entry.id }}" data-name="{{= entry.sortname }}">
        <span class="sprite {{= entry.sprite}}">{{= entry.svgIcon }}</span>
        <a class="error-link entry-link">{{= entry.name }}</a>
    </div>
#}}
{{? Object.keys(it.entries).length === 0 }}
    <div id="empty" class="empty">{{= droppy.svg["upload-cloud"] }}<div class="text">Add files</div></div>
{{??}}
    {{  if (it.sortBy === "name") it.sortBy = "type";
        var entries = convertEntries(it.entries), entry = {};
        var folder = (it.folder === "/") ? "/" : it.folder + "/";
        var sortedEntries = sortByProp(entries, it.sortBy);

        if(it.sortAsc) sortedEntries.reverse();
        entry.sort = { type: "", mtime: "", size: "" };
        entry.sort[it.sortBy] = "active " + (it.sortAsc ? "up" : "down");
    }}
    {{#def.directoryHeader}}
    {{~sortedEntries :name}}
        {{  entry.type = it.entries[name].type;
            entry.mtime = Number(it.entries[name].mtime) * 1e3;
            entry.size = Number(it.entries[name].size);
            entry.prettysize = formatBytes(Number(entry.size));
            entry.id = folder + name;
            entry.sprite = getSpriteClass(/[^.]*$/.exec(name)[0]);
            entry.name = it.isUpload ? decodeURIComponent(name) : name;
            entry.sortname = entry.name.replace(/['"]/g, "_");

            if (Object.keys(droppy.audioTypes).indexOf(ext(name)) !== -1) {
                entry.classes = name === it.playing ? "playable playing" : "playable";
                entry.svgIcon = '<span class="icon-play">' + droppy.svg.play + '</span>';
            } else {
                entry.classes = "";
                entry.svgIcon = "";
            };
        }}
        {{? entry.type === "f" }}
            {{#def.file}}
        {{?? entry.type === "d" }}
            {{#def.folder}}
        {{?? entry.type === "e" }}
            {{#def.error}}
        {{?}}
    {{~}}
{{?}}
